{
  "solutions": [
    {
      "id": "93c3bed31d030b5868fb81deb000d426c063e7a19d75ab28b7b8c693727951a8",
      "title": "Example Problem",
      "difficulty": "Easy",
      "tags": [
        "Array",
        "Example"
      ],
      "date": "2025-01-15",
      "description": "This is an example solution file showing the required format. Replace this with your actual LeetCode solutions! Make sure to include all metadata fields above your solution code.",
      "problemUrl": "https://leetcode.com/problems/two-sum/",
      "solution": "class Solution:\n    def exampleFunction(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        This is an example solution.\n        \n        Replace this entire file with your actual LeetCode solutions.\n        Keep the metadata format above (Title, Difficulty, etc.)\n        \"\"\"\n        return []",
      "filename": "ExampleSolution.py"
    },
    {
      "id": "e0cad571aa2e049881ca32323c36ca79611151477947d3b619ae9d09496e8577",
      "title": "Two Sum",
      "difficulty": "Easy",
      "tags": [
        "Array",
        "Hash Table"
      ],
      "date": "2025-01-17",
      "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
      "problemUrl": "https://leetcode.com/problems/two-sum/",
      "solution": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        numMap = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in numMap:\n                return [numMap[complement], i]\n            numMap[num] = i\n        return []",
      "filename": "TwoSum.py"
    },
    {
      "id": "0949f2ca428b775a6bba77af4283ab11aff1a23d6d1ab0fdc25b884042052eaf",
      "title": "Valid Parentheses",
      "difficulty": "Easy",
      "tags": [
        "String",
        "Stack"
      ],
      "date": "2025-07-18",
      "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
      "problemUrl": "https://leetcode.com/problems/valid-parentheses/",
      "solution": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n        \n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            else:\n                stack.append(char)\n        \n        return not stack",
      "filename": "ValidParentheses.py"
    }
  ],
  "totalSolutions": 3,
  "lastUpdated": "2025-07-18T20:12:38.124Z"
}